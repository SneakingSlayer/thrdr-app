// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  userName      String           @unique
  password      String
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  creationsBy   Thread[]         @relation(name: "CreationsBy")
  creationsFor  Thread[]         @relation(name: "CreationsFor")
  likes         ThreadLikes[]
  comments      ThreadComments[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Thread {
  id           String           @id @default(cuid())
  title        String
  description  String
  createdForId String
  createdById  String
  createdBy    User             @relation(name: "CreationsBy", fields: [createdById], references: [id], onDelete: Cascade)
  createdFor   User             @relation(name: "CreationsFor", fields: [createdForId], references: [id], onDelete: Cascade)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  likes        ThreadLikes[]
  comments     ThreadComments[]
}

model ThreadLikes {
  id        String   @id @default(cuid())
  userId    String
  threadId  String
  user      User     @relation(fields: [userId], references: [id])
  thread    Thread   @relation(fields: [threadId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThreadComments {
  id          String   @id @default(cuid())
  createdById String
  threadId    String
  comment     String
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  thread      Thread   @relation(fields: [threadId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
